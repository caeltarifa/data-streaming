I need a production-ready Streamlit web application with the following features and architecture:

Features & Data Flow:
Real-Time Data Reception:

The application should receive real-time data from a Kafka stream consisting of two parameters: pressure and temperature.

The backend should fetch these values from a Kafka topic using the python-kafka library.

Data Refresh Interval:

The application should receive new data every 3 seconds. The Kafka stream will send new pressure and temperature values every 3 seconds.

Dynamic Charting:

The received pressure and temperature values should be plotted on the frontend in a dynamic chart.

Altair will be used for visualizing this data, ensuring smooth, real-time updates every 3 seconds. The chart should update automatically without requiring a manual page refresh.

Random Data Generation:

If no new data is received from Kafka, the backend should randomly generate pressure and temperature values every 3 seconds.

These randomly generated values should simulate real-time data and be plotted in the chart alongside the Kafka data.

Chart Update:

The chart should update every 3 seconds with new data points (either real-time from Kafka or simulated).

The frontend should dynamically display these updates, ensuring a smooth user experience with real-time chart updates.

Architectural and Security Considerations:
Well-Architected and Isolated Environments:

The entire application (frontend, backend, and Kafka integration) should be containerized using Docker. This will help with isolation, scalability, ease of deployment, and separation of services.

Principle of Least Privilege:

Each component (frontend, backend, Kafka consumer) should operate under the least privilege principle, meaning it only has access to the specific resources it needs.

This should be enforced through proper user permissions, container security settings, and network isolation in Docker.

Production-Ready Criteria:

Scalability: The app should be able to scale to handle increasing data traffic and user interactions.

Performance: Ensure quick load times and minimal latency in processing real-time data.

Security: The app should use HTTPS, with proper authentication and role-based access control (RBAC) if needed. Sensitive data should be encrypted both in transit and at rest.

Reliability: The application should have proper error handling, logging, and monitoring to track Kafka consumption, data flow, and chart updates.

Technical Details:
Frontend (Streamlit with Altair):

Streamlit will be used for the user interface, displaying real-time charts.

Altair will be used for charting, providing minimalist, dynamic, and interactive visualizations that update every 3 seconds.

Backend (Python with Streamlit and Kafka):

The backend will be implemented in Python to handle Kafka connections, consume data from Kafka, and generate random pressure and temperature values when no Kafka data is received.

Kafka Integration:

Kafka will be used to consume real-time pressure and temperature data, which will be displayed in the Streamlit app.

Charting (Altair):

Altair will be used for real-time pressure vs. temperature charting. The chart will update every 3 seconds, displaying both Kafka data and randomly simulated data.

Data Generation:

When no Kafka data is available, the backend will randomly generate pressure and temperature values every 3 seconds using Pythonâ€™s random module.

Deployment & Hosting:
Containerized Environment (Docker):

The application should be fully containerized using Docker, with Docker Compose or Kubernetes used to orchestrate the containers in production.